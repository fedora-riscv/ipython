Index: ipython-0.10/IPython/external/argparse/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/argparse/__init__.py
@@ -0,0 +1,11 @@
+try:
+    import argparse
+    # Workaround an argparse bug
+    if 'RawTextHelpFormatterArgumentDefaultsHelpFormatter' in argparse.__all__:
+        import itertools
+        argparse.__all__ = list(itertools.chain( [i for i in argparse.__all__
+            if i != 'RawTextHelpFormatterArgumentDefaultsHelpFormatter'],
+            ['RawTextHelpFormatter', 'ArgumentDefaultsHelpFormatter']))
+    from argparse import *
+except ImportError:
+    from _argparse import *
Index: ipython-0.10/IPython/external/configobj/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/configobj/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from configobj import *
+except ImportError:
+    from _configobj import *
Index: ipython-0.10/IPython/external/guid/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/guid/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from guid import *
+except ImportError:
+    from _guid import *
Index: ipython-0.10/IPython/external/Itpl/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/Itpl/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from Itpl import *
+except ImportError:
+    from _Itpl import *
Index: ipython-0.10/IPython/external/mglob/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/mglob/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from mglob import *
+except ImportError:
+    from _mglob import *
Index: ipython-0.10/IPython/external/path/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/path/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from path import *
+except ImportError:
+    from _path import *
Index: ipython-0.10/IPython/external/pretty/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/pretty/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from pretty import *
+except ImportError:
+    from _pretty import *
Index: ipython-0.10/IPython/external/simplegeneric/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/simplegeneric/__init__.py
@@ -0,0 +1,4 @@
+try:
+    from simplegeneric import *
+except ImportError:
+    from _simplegeneric import *
Index: ipython-0.10/IPython/external/validate/__init__.py
===================================================================
--- /dev/null
+++ ipython-0.10/IPython/external/validate/__init__.py
@@ -0,0 +1,8 @@
+try:
+    import validate
+    if '__docformat__' in validate.__all__ and validate.__version__.split('.') >= ['1', '0', '1']:
+        # __docformat__ was removed in 1.0.1 but 
+        validate.__all__ = [i for i in validate.__all__ if i != '__docformat__']
+    from validate import *
+except ImportError:
+    from _validate import *
Index: ipython-0.10/setupbase.py
===================================================================
--- ipython-0.10.orig/setupbase.py
+++ ipython-0.10/setupbase.py
@@ -106,6 +106,15 @@ def find_packages():
     add_package(packages, 'config', tests=True)
     add_package(packages , 'Extensions')
     add_package(packages, 'external')
+    add_package(packages, 'external.argparse')
+    add_package(packages, 'external.configobj')
+    add_package(packages, 'external.guid')
+    add_package(packages, 'external.Itpl')
+    add_package(packages, 'external.mglob')
+    add_package(packages, 'external.path')
+    add_package(packages, 'external.pretty')
+    add_package(packages, 'external.simplegeneric')
+    add_package(packages, 'external.validate')
     add_package(packages, 'gui')
     add_package(packages, 'gui.wx')
     add_package(packages, 'frontend', tests=True)
